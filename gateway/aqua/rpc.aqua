aqua RPC

import "@fluencelabs/aqua-lib/builtin.aqua"
import Subnet, Worker from "@fluencelabs/aqua-lib/subnet.aqua"

import "services.aqua"
use "deals.aqua"

import Logger, initPeerLogger from "logger.aqua"
import Balancer, ProviderBalancer, randomBalancer, cycleBalancer from "balancer.aqua"
import onPeerCounter from "counter.aqua"
import QuorumChecker, QuorumResult, onPeerQuorumChecker from "quorum.aqua"
import timeRandom from "random.aqua"
import RPCEth, fromWorkerProvider from "eth_rpc.aqua"

import NumOp from "utils.aqua"

export randomLoadBalancingEth, roundRobinEth, quorumEth

func errorQuorumResult(msg: string) -> QuorumResult:
  <- QuorumResult(value = "", results = [], error = msg)

func errorJsonString(msg: string) -> JsonString:
  <- JsonString(value = "", success = false, error = msg)

-- Get workers participating in deal
func getWorkers() -> []Worker, ?string:
  on INIT_PEER_ID via HOST_PEER_ID:
    deals <- Deals.get()
  dealId = deals.defaultWorker!.dealIdOriginal
  on HOST_PEER_ID:
    result <- Subnet.resolve(dealId)
  <- result.workers, result.error

-- Call RPC method through ability
func rpcCall{RPCEth}(method: string, jsonArgs: []string) -> JsonString:
  <- RPCEth.call(method, jsonArgs)

-- Call RPC method with load balancing
func balancedEthCall{Logger, Balancer}(method: string, jsonArgs: []string) -> JsonString:
  on HOST_PEER_ID:
    worker, provider <- Balancer.next()
    Logger.logWorker(worker)
    Logger.logCall(provider)
    Op.noop() -- dirty hack for topology to converge
    rpc <- fromWorkerProvider(worker, provider)
    result <- rpcCall{rpc}(method, jsonArgs)
  <- result

-- Call RPC method with random load balancing
func randomLoadBalancingEth(uris: []string, method: string, jsonArgs: []string) -> JsonString:
  result: ?JsonString

  workers, error <- getWorkers()
  if error != nil:
    result <- errorJsonString(error!)
  else:
    log <- initPeerLogger()
    random <- timeRandom()
    balancer <- randomBalancer{random}(workers, uris)
    result <- balancedEthCall{log, balancer}(method, jsonArgs)
  
  <- result!

-- Call RPC method with round-robin load balancing
func roundRobinEth(uris: []string, method: string, jsonArgs: []string, counterServiceId: string, counterPeerId: string) -> JsonString:
  result: ?JsonString

  workers, error <- getWorkers()
  if error != nil:
    result <- errorJsonString(error!)
  else:
    log <- initPeerLogger()
    counter <- onPeerCounter(counterPeerId, counterServiceId)
    balancer <- cycleBalancer{counter}(workers, uris)
    result <- balancedEthCall{log, balancer}(method, jsonArgs)
  
  <- result!

-- Call RPC method with workers quorum and provider load balancing
func quorum{ProviderBalancer, QuorumChecker}(workers: []Worker, quorumNumber: u32, timeout: u32, method: string, jsonArgs: []string) -> QuorumResult:
  results: *JsonString
  on HOST_PEER_ID:  
    for worker <- workers par:
      provider <- ProviderBalancer.nextProvider()
      rpc <- fromWorkerProvider(worker, provider)
      results <- rpcCall{rpc}(method, jsonArgs)

  -- wait all results from all workers with timeout
  join results[workers.length - 1]
  par Peer.timeout(timeout, "Workers timeout")

  <- QuorumChecker.check(results, quorumNumber)

-- Call RPC method with workers quorum and provider load balancing
func quorumEth(uris: []string, quorumNumber: u32, timeout: u32, method: string, jsonArgs: []string, quorumServiceId: string, quorumPeerId: string) -> QuorumResult:
  result: *QuorumResult

  workers, error <- getWorkers()
  if error != nil:
    result <- errorQuorumResult(error!)
  else:
    random <- timeRandom()
    balancer <- randomBalancer{random}(workers, uris)
    quorumChecker <- onPeerQuorumChecker(quorumPeerId, quorumServiceId)
    result <- quorum{balancer, quorumChecker}(workers, quorumNumber, timeout, method, jsonArgs)

  <- result!