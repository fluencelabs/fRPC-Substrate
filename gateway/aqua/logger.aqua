module Logger declares Logger, initPeerLogger

export LoggerSrv

import Worker from "@fluencelabs/aqua-lib/subnet.aqua"

ability Logger:
  log(s: []string)
  logNum(n: u32)
  logCall(s: string)
  logWorker(w: Worker)

service LoggerSrv("logger"):
  log(s: []string)
  logNum(n: u32)
  logCall(s: string)
  logWorker(w: Worker)

-- Create Logger ability that logs
-- on INIT_PEER_ID via HOST_PEER_ID
-- through LoggerSrv
func initPeerLogger() -> Logger:
  -- closures do not capture topology here

  log = func (s: []string):
    on INIT_PEER_ID via HOST_PEER_ID:
        LoggerSrv.log(s)
  logNum = func (n: u32):
    on INIT_PEER_ID via HOST_PEER_ID:
        LoggerSrv.logNum(n)
  logCall = func (s: string):
    on INIT_PEER_ID via HOST_PEER_ID:
        LoggerSrv.logCall(s)
  logWorker = func (w: Worker):
    on INIT_PEER_ID via HOST_PEER_ID:
        LoggerSrv.logWorker(w)

  <- Logger(log=log, logNum=logNum, logCall=logCall, logWorker=logWorker)