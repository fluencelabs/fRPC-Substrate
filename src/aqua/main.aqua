aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/subnetwork.aqua"
import Registry, Record from "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import get from "deals.aqua"
import "services.aqua"

-- import App from "deployed.app.aqua"
-- export App, addOne



-- IMPORTANT: Add exports for all functions that you want to run
export helloWorld, helloWorldRemote, getInfo, getInfos, getInfosInParallel, getWorkers

-- DOCUMENTATION:
-- https://fluence.dev


-- export status

-- service Console("run-console"):
    -- print(any: âŠ¤)

func getWorkers() -> u32, [][]Service:
  workersInfo <- get()
  dealId = workersInfo.defaultWorker!.dealId
  services: *[]Service
  on HOST_PEER_ID:
    workersOp <- resolveSubnetwork(dealId)
    workers = workersOp!
    for worker <- workers par:
      on worker.metadata.peer_id via worker.metadata.relay_id:
        services <- Srv.list()
  join services[workers.length - 1]
  <- workers.length, services

-- local
func helloWorld(name: string) -> string:
    <- Op.concat_strings("Hello, ", name)

-- remote
func helloWorldRemote(name: string) -> string:
    on HOST_PEER_ID:
        hello_msg <- helloWorld(name)
        from_msg <- Op.concat_strings(hello_msg, "! From ")
        from_peer_msg <- Op.concat_strings(from_msg, HOST_PEER_ID)
    <- from_peer_msg

-- request response
func getInfo() -> Info, PeerId:
    on HOST_PEER_ID:
        info <- Peer.identify()
    <- info, HOST_PEER_ID

-- iterate through several peers
func getInfos(peers: []PeerId) -> []Info:
    infos: *Info
    for p <- peers:
        on p:
            infos <- Peer.identify()
    <- infos

-- parallel computation
func getInfosInParallel(peers: []PeerId) -> []Info:
    infos: *Info
    for p <- peers par:
        on p:
            infos <- Peer.identify()

    join infos[Op.array_length(peers) - 1] -- "-1" because it's 0-based
    par Peer.timeout(PARTICLE_TTL / 2, "")

    <- infos
